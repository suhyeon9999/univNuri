<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper  namespace="lecture">
  <!-- 강의리스트 불러오기 -->
  	<select id="getAllLectList" resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx   		  		
  		where l.lect_active = 0 OR l.lect_active = 2    		  		
  	</select>
	<!-- 과목 과목군 리스트 -->
			<select id="lestSubSetList" parameterType="String" resultType="map">
			    SELECT j.subject_name, s.sub_set_name
			    FROM lecture_subject_set g
			    INNER JOIN lecture l ON g.lect_idx = l.lect_idx  
			    INNER JOIN subject_set s ON g.sub_set_idx = s.sub_set_idx  
			    INNER JOIN subject j ON s.subject_idx = j.subject_idx  	
			    WHERE l.lect_idx = #{lect_idx}
			      AND (l.lect_active = 0 OR l.lect_active = 2)
			</select>

	<!-- 학과 상세보기 -->
	<select id="detailLect" parameterType="String" resultType="map">
		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where l.lect_idx=#{lect_idx}
	</select>
	<!-- 정보 미입력 강의보기 -->	
  	<select id="searchNullLect" resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx    
  		where ( t.t_idx is null or	t.lect_day is null or t.lect_start_time is null 
  		or t.lect_end_time is null  or t.class_idx is null   )
  		and l.lect_active = 0		
  	</select>
	<!-- 학과 검색 -->
	<!-- 강의코드로 검색 -->
	<select id="searchLectId" parameterType="String"  resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where l.lect_id like CONCAT('%', #{lect_id}, '%')  and l.lect_active = 0    		  		
  	</select>
	<!-- 강의명으로 검색 -->
	<select id="searchLectName" parameterType="String"  resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where l.lect_name like CONCAT('%', #{lect_name}, '%')  and l.lect_active = 0      		  		
  	</select>
	<!-- 개설학과로 검색 -->
	<select id="searchDeptName" parameterType="String"  resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where l.dept_name like CONCAT('%', #{dept_name}, '%') and l.lect_active = 0   	  		
  	</select>
	<!-- 강의요일로 검색 -->
	<select id="searchLectDay" parameterType="String"  resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where l.lect_day like CONCAT('%', #{lect_day}, '%') and l.lect_active = 0      		  		
  	</select>
	<!-- 담당교수로 검색 -->
	<select id="searchName" parameterType="String"  resultType="map">
  		select l.* , d.dept_name, c.*, u.name 
  		from lecture l
  		left join department d on l.dept_idx = d.dept_idx  
  		left join class c on l.class_idx = c.class_idx  
  		left join teacher t on l.t_idx = t.t_idx  
  		left join user u on t.user_idx = u.user_idx 
  		where u.name like CONCAT('%', #{name}, '%')  and l.lect_active = 0     		  		
  	</select>
		<!-- 강의등록 전 과목군 검색 -->
<select id="getGroupListByDept" parameterType="map" resultType="map">
    SELECT 
        ss.sub_set_idx,
        ss.sub_set_name AS group_name,
        d.dept_name,
        GROUP_CONCAT(s.subject_name SEPARATOR ', ') AS subjects
    FROM subject_set ss
    JOIN subject s ON ss.subject_idx = s.subject_idx
    JOIN department d ON ss.dept_idx = d.dept_idx
    WHERE 
        ss.dept_idx = #{dept_idx}
        AND ss.sub_set_active = 0
        AND s.subject_active = 0
    <if test="sub_set_name != null and sub_set_name != ''">
        AND ss.sub_set_name LIKE CONCAT('%', #{sub_set_name}, '%')
    </if>
    <if test="subject_name != null and subject_name != ''">
        AND s.subject_name LIKE CONCAT('%', #{subject_name}, '%')
    </if>
    GROUP BY ss.sub_set_idx
</select>


<!-- 강의등록 학과불러오기 -->
  	<select id="getAllActiveDepts" resultType="map">
    SELECT dept_idx, dept_name
    FROM department
    WHERE dept_active = 0
</select>
  <!-- 강의등록 선생 불러오기 -->
<select id="getAllActiveTeachers" resultType="map">
    SELECT t.t_idx, u.name
    FROM teacher t
    JOIN user u ON t.user_idx = u.user_idx
    WHERE t.t_active = 0
</select>
<!-- 강의등록 학과선택시 선생 불러오기 -->
<select id="getTeachersByDept" parameterType="String" resultType="map">
    SELECT t.t_idx, u.name
    FROM teacher t
    JOIN user u ON t.user_idx = u.user_idx
    WHERE t.dept_idx = #{dept_idx}
      AND t.t_active = 0
</select>
<!-- 강의건물 선택 시 해당 강의실 목록 조회 -->
<select id="getRoomsByBuilding" parameterType="String" resultType="map">
    SELECT DISTINCT class_room 
    FROM class 
    WHERE class_building = #{building}
</select>
<!-- 강의실 건물,호실 선택하면 시간 나오게 -->
<select id="getAvailableStartTimes" parameterType="map" resultType="string">
    SELECT TIME_FORMAT(t, '%H:%i') AS available_time
    FROM (
        SELECT ADDTIME('09:00:00', SEC_TO_TIME(50 * 60 * a.a)) AS t
        FROM (
            SELECT 0 AS a UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 
            UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 
            UNION SELECT 8 UNION SELECT 9
        ) a
    ) times
    WHERE NOT EXISTS (
        SELECT 1
        FROM lecture l
        JOIN class c ON l.class_idx = c.class_idx
        WHERE 
            l.lect_day = #{lect_day}
            AND c.class_building = #{class_building}
            AND c.class_room = #{class_room}
            AND l.lect_active = 0
            AND (
                t BETWEEN l.lect_start_time AND SUBTIME(l.lect_end_time, '00:01:00')
                OR ADDTIME(t, '00:49:59') BETWEEN l.lect_start_time AND l.lect_end_time
            )
    )
</select>
<!-- 1. 강의 insert -->
  <insert id="insertLecture" parameterType="map" useGeneratedKeys="true" keyProperty="lect_idx">
    INSERT INTO lecture (
      lect_id,
      dept_idx,
      class_idx,
      t_idx,
      lect_name,
      lect_day,
      lect_credit,
      lect_start_time,
      lect_end_time,
      lect_start_date,
      lect_end_date,
      lect_max,
      lect_active
    ) VALUES (
      #{lect_id},
      #{dept_idx},
      #{class_idx},
      #{t_idx},
      #{lect_name},
      #{lect_day},
      #{lect_credit},
      #{lect_start_time},
      #{lect_end_time},
      #{lect_start_date},
      #{lect_end_date},
      #{lect_max},
      2
    )
  </insert>

  <!-- 2. 강의실 정보 조회 -->
  <select id="getClassByLocation" parameterType="map" resultType="map">
    SELECT class_idx, class_max
    FROM class
    WHERE class_building = #{building}
      AND class_room = #{room}
    LIMIT 1
  </select>


  <!-- 4. lecture_subject_set insert -->
  <insert id="insertLectureSubjectSet" parameterType="map">
    INSERT INTO lecture_subject_set (
      lect_idx,
      sub_set_idx
    ) VALUES (
      #{lect_idx},
      #{sub_set_idx}
    )
  </insert>

  <!-- 5. dept_idx → dept_id -->
  <select id="getDeptCodeByIdx" parameterType="string" resultType="string">
    SELECT dept_id
    FROM department
    WHERE dept_idx = #{dept_idx}
  </select>

  <!-- 6. dept_id로 시작하는 강의코드 중 MAX 조회 -->
  <select id="getMaxLectureCodeByDept" parameterType="string" resultType="string">
    SELECT MAX(SUBSTRING(lect_id, LENGTH(#{deptCode}) + 1))
    FROM lecture
    WHERE lect_id LIKE CONCAT(#{deptCode}, '%')
  </select>

<select id="getSubSetIdxByGroupName" parameterType="string" resultType="int">
  SELECT sub_set_idx
  FROM subject_set
  WHERE sub_set_name = #{subSetName}
  LIMIT 1
</select>
<update id="deactivateLectures" parameterType="string">
    UPDATE lecture
    SET lect_active = 1
    WHERE lect_idx = #{lect_idx}
</update>
<select id="getSubjectGroupsByLectureIdx" parameterType="string" resultType="string">
    SELECT DISTINCT sub_set_name
    FROM subject_set
    WHERE dept_idx = #{dept_idx} AND sub_set_active = 0
</select>
<select id="getProfessorListByDept" parameterType="string" resultType="map">
    SELECT t.t_idx, u.name
    FROM teacher t
    JOIN user u ON t.user_idx = u.user_idx
    WHERE t.dept_idx = #{dept_idx}
</select>
  <select id="classRoomListByBuilding" parameterType="string" resultType="string">
    SELECT DISTINCT class_room
    FROM class
    WHERE class_building = #{building}
  </select>
<update id="updateLecture" parameterType="map">
    UPDATE lecture
    SET
        lect_name = #{lect_name},
        lect_id = #{lect_id},
        dept_idx = #{dept_idx},
        t_idx = #{t_idx},
        lect_credit = #{lect_credit},
        lect_max = #{lect_max},
        class_idx = #{class_idx},
        lect_day = #{lect_day},
        lect_start_time = #{lect_start_time},
        lect_end_time = ADDTIME(#{lect_start_time}, '00:50:00')
    WHERE lect_idx = #{lect_idx}
</update>
<!-- 기존 과목군 목록 조회 -->
<select id="getSubSetIdxListByLectIdx" resultType="int">
    SELECT sub_set_idx
    FROM lecture_subject_set
    WHERE lect_idx = #{lect_idx}
</select>

<!-- 과목군 이름 + 학과로 sub_set_idx 조회 -->
<select id="getSubSetIdxByNameAndDept" resultType="int">
    SELECT sub_set_idx
    FROM subject_set
    WHERE sub_set_name = #{sub_set_name}
      AND dept_idx = #{dept_idx}
      AND sub_set_active = 0
</select>

<!-- insert -->
<insert id="insertLectureSubjectSetByLectIdx">
    INSERT INTO lecture_subject_set (lect_idx, sub_set_idx)
    VALUES (#{lect_idx}, #{sub_set_idx})
</insert>

<!-- delete -->
<delete id="deleteLectureSubjectSetByLectIdx">
    DELETE FROM lecture_subject_set
    WHERE lect_idx = #{lect_idx}
      AND sub_set_idx = #{sub_set_idx}
</delete>


  </mapper>