<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="senroll">
	<!-- 수강중인 과목 조회 -->
	<select id="senrollcurrent" resultType="Map" parameterType="String">
SELECT 
  l.lect_idx,
  l.lect_name,
  cu.name AS teacher_name,
  c.class_building,
  c.class_room,
  l.lect_day AS day_of_week,
  CONCAT(TIME_FORMAT(l.lect_start_time, '%H:%i'), ' ~ ', TIME_FORMAT(l.lect_end_time, '%H:%i')) AS lecture_time,
  (SELECT COUNT(*) FROM assign a WHERE a.lect_idx = l.lect_idx) AS assign_count 

FROM student s 
JOIN user u ON s.user_idx = u.user_idx 
JOIN enroll e ON s.s_idx = e.s_idx 
JOIN lecture l ON e.lect_idx = l.lect_idx 
JOIN teacher t ON l.t_idx = t.t_idx 
JOIN user cu ON t.user_idx = cu.user_idx 
JOIN class c ON l.class_idx = c.class_idx 

WHERE s.s_idx = #{s_idx} 
  AND e.enroll_status = 1 
  AND l.lect_active = 0
  <![CDATA[
  AND NOW() BETWEEN l.lect_start_date AND l.lect_end_date
  ]]>
		</select>
 <select id="senrollpast" resultType="map" parameterType="map">
SELECT 
  l.lect_idx,
  l.lect_name,
  cu.name AS teacher_name,
  c.class_building,
  c.class_room,
  l.lect_day AS day_of_week,
  CONCAT(TIME_FORMAT(l.lect_start_time, '%H:%i'), ' ~ ', TIME_FORMAT(l.lect_end_time, '%H:%i')) AS lecture_time,
  (SELECT COUNT(*) FROM assign a WHERE a.lect_idx = l.lect_idx) AS assign_count,
  '0%' AS attendance_rate
FROM student s 
JOIN user u ON s.user_idx = u.user_idx 
JOIN enroll e ON s.s_idx = e.s_idx 
JOIN lecture l ON e.lect_idx = l.lect_idx 
JOIN teacher t ON l.t_idx = t.t_idx 
JOIN user cu ON t.user_idx = cu.user_idx 
JOIN class c ON l.class_idx = c.class_idx 
WHERE s.s_idx = #{s_idx}
  AND e.enroll_status = 1 
  AND l.lect_active = 0 
  AND l.lect_end_date <![CDATA[ < ]]> NOW()
  
  <if test="year != null and year != ''">
    AND YEAR(l.lect_start_date) = #{year}
  </if>

  <if test="semester != null and semester != ''">
    <choose>
      <when test='"1".equals(semester)'>
        AND MONTH(l.lect_start_date) BETWEEN 1 AND 6
      </when>
      <when test='"2".equals(semester)'>
        AND MONTH(l.lect_start_date) BETWEEN 7 AND 12
      </when>
    </choose>
  </if>

  <if test="lect_name != null and lect_name != ''">
    AND l.lect_name LIKE CONCAT('%', #{lect_name}, '%')
  </if>
	</select>
		
		<select id="counttotal" resultType="String" parameterType="Map">
			 SELECT COUNT(*) 
        FROM attendance a 
        JOIN enroll e ON a.enroll_idx = e.enroll_idx 
        WHERE e.s_idx = #{s_idx} 
          AND e.lect_idx = #{lect_idx}
		</select>
		
		<select id="present" resultType="String" parameterType="Map">
		SELECT COUNT(*) 
        FROM attendance a 
        JOIN enroll e ON a.enroll_idx = e.enroll_idx 
        WHERE e.s_idx = #{s_idx} 
          AND e.lect_idx = #{lect_idx} 
          AND a.attend_status = 1
		</select>
    <!-- 연도리스트 -->
    <select id="getLectureYears" resultType="Integer">
    SELECT DISTINCT CAST(YEAR(lect_start_date) AS UNSIGNED) AS year
    FROM lecture
    WHERE lect_start_date IS NOT NULL
    ORDER BY year DESC
	</select>
	<select id="getLectureSemesters" resultType="Integer">
    SELECT DISTINCT 
        CASE
            WHEN MONTH(lect_start_date) BETWEEN 1 AND 6 THEN 1
            WHEN MONTH(lect_start_date) BETWEEN 7 AND 12 THEN 2
        END AS semester 
    FROM lecture 
    WHERE lect_start_date IS NOT NULL 
    ORDER BY semester ASC 
</select>	
<!-- 과목 디테일 상태 -->
<select id="getTaskSubmitStatus" resultType="map" parameterType="map">
    SELECT 
        a.assign_idx,
        a.assign_title,
        DATE_FORMAT(a.start_time, '%Y-%m-%d %H:%i') AS submit_start,
        DATE_FORMAT(a.assign_due_date, '%Y.%m.%d %H:%i') AS submit_end,
        CASE 
            WHEN s.submit_idx IS NULL THEN '미제출'
            ELSE '제출완료'
        END AS submit_status
    FROM assign a
    LEFT JOIN enroll e ON a.lect_idx = e.lect_idx AND e.s_idx = #{s_idx}
    LEFT JOIN submit s ON s.assign_idx = a.assign_idx AND s.enroll_idx = e.enroll_idx
    WHERE a.lect_idx = #{lect_idx} AND assign_active = 0
    
<choose>
    <when test="submitPeriod == '가능'">
        <![CDATA[
            AND NOW() BETWEEN a.start_time AND a.assign_due_date
        ]]>
    </when>
    <when test="submitPeriod == '불가능'">
        <![CDATA[
            AND (NOW() < a.start_time OR NOW() > a.assign_due_date)
        ]]>
    </when>
</choose>
    
    <if test="submitStatus != null and submitStatus != ''">
 <choose>
        <when test="submitStatus == '제출'">
            AND s.submit_idx IS NOT NULL
        </when>
        <when test="submitStatus == '미제출'">
            AND s.submit_idx IS NULL
        </when>
    </choose>
    </if>

    ORDER BY a.assign_due_date ASC
</select>
<!-- 디테일 강의 이름만 가져오는거 -->
<select id="getlectureName" resultType="String" parameterType="String">
	SELECT lect_name
FROM lecture
WHERE lect_idx = #{lect_idx};
</select>
<!-- 특정 과목에 과제 제출하기전 교수가 적은 정보 불러오기 -->
<select id="getassignInfo" resultType="map">
  SELECT 
    a.assign_title,
    a.assign_content,
    a.start_time,
    a.assign_due_date,
    l.lect_name,
    u.name AS professor_name,
    
    s.submit_idx,
    s.submit_title,
    s.submit_content,
    s.submit_write_date,
    
    f.submit_f_name
    
  FROM assign a
  JOIN lecture l ON a.lect_idx = l.lect_idx
  JOIN teacher t ON l.t_idx = t.t_idx
  JOIN user u ON t.user_idx = u.user_idx

  LEFT JOIN submit s ON s.assign_idx = a.assign_idx AND s.enroll_idx = #{enroll_idx}
  LEFT JOIN submit_file f ON s.submit_idx = f.submit_idx AND f.submit_f_order = 1

  WHERE a.assign_idx = #{assign_idx}
</select>
<!-- 과목에 과제 제출 하기위한 index 추출 -->
<select id="getEnrollIdx" parameterType="map" resultType="String">
  SELECT e.enroll_idx
  FROM enroll e
  JOIN assign a ON e.lect_idx = a.lect_idx
  WHERE a.assign_idx = #{assign_idx}
    AND e.s_idx = #{s_idx}
</select>
<!-- 실제 과목에 과제제출을 위한 inst -->
<insert id="insertSubmit" parameterType="com.university.nuri.vo.studentvo.SubmitVO" useGeneratedKeys="true" keyProperty="submit_idx">
  INSERT INTO submit (
    assign_idx,
    enroll_idx,
    submit_title,
    submit_content,
    submit_write_date,
    submit_active
  ) VALUES (
    #{assign_idx},
    #{enroll_idx},
    #{submit_title},
    #{submit_content},
    NOW(),
    0
  )
</insert>
<insert id="insertSubmitFile"  parameterType="com.university.nuri.vo.studentvo.SubmitFileVO">
    INSERT INTO submit_file (
        submit_f_name,
        submit_f_old_name,
        submit_f_size,
        submit_f_type,
        submit_f_order,
        submit_idx
    ) VALUES (
        #{submit_f_name},
        #{submit_f_old_name},
        #{submit_f_size},
        #{submit_f_type},
        #{submit_f_order},
        #{submit_idx}
    )
</insert>
<!-- 과제 제출한거 수정 -->
<update id="submit" parameterType="com.university.nuri.vo.studentvo.SubmitVO">
  UPDATE submit
  SET 
    submit_content = #{submit_content},
    submit_write_date = NOW()   <!-- 날짜도 수정할 경우 -->
  WHERE submit_idx = #{submit_idx}
</update>
<update id="submitfil" parameterType="com.university.nuri.vo.studentvo.SubmitFileVO">
  UPDATE submit_file
  SET 
    submit_f_name = #{submit_f_name},
    submit_f_old_name = #{submit_f_old_name},
    submit_f_size = #{submit_f_size},
    submit_f_type = #{submit_f_type},
    submit_f_date = NOW()           <!-- 파일 업로드 일시 다시 기록 -->
  WHERE submit_idx = #{submit_idx}
    AND submit_f_order = 1          <!-- 파일 순서 지정된 경우만 -->
</update>
<!-- 출결조회를 위한 enroll index 구하기 -->
<select id="getEnrollAttend" parameterType="map" resultType="String">
  SELECT e.enroll_idx
  FROM enroll e
  WHERE e.lect_idx = #{lect_idx}
    AND e.s_idx = #{s_idx}
</select>
<!-- 출결 리스트 조회 -->
<select id="getAttendanceList" parameterType="map" resultType="map">
    SELECT 
    a.attend_idx,
    a.attend_date,
    a.attend_status,
    l.lect_name
  FROM attendance a
  JOIN enroll e ON a.enroll_idx = e.enroll_idx
  JOIN lecture l ON e.lect_idx = l.lect_idx
  WHERE a.enroll_idx = #{enroll_idx}
    <if test="attend_status != null and attend_status != '전체'">
      AND a.attend_status = 
      <choose>
        <when test="attend_status == '출석'">1</when>
        <when test="attend_status == '결석'">5</when>
        <when test="attend_status == '지각'">2</when>
        <when test="attend_status == '조퇴'">3</when>
        <when test="attend_status == '지각/조퇴'">4</when>
      </choose>
    </if>
    <if test="attend_date != null and attend_date != ''">
      AND DATE(a.attend_date) = #{attend_date}
    </if>
  ORDER BY a.attend_date ASC
</select>
<!-- 차시를 구하기위한 카운트 -->
<select id="getAttendanceCount" parameterType="String" resultType="int">
  SELECT COUNT(*) 
  FROM attendance 
  WHERE enroll_idx = #{enroll_idx}
</select>
<!-- 강의정보 불러오기 -->
<select id="getLectInfo" parameterType="String" resultType="map">
SELECT 
    l.lect_name,
    l.lect_id,
    u.name AS professor_name,
    l.lect_credit,

    l.lect_day AS day_of_week,

    CONCAT(TIME_FORMAT(l.lect_start_time, '%H:%i'), ' ~ ', TIME_FORMAT(l.lect_end_time, '%H:%i')) AS lecture_time,

    c.class_building,  
    c.class_room,      

    CONCAT(DATE_FORMAT(l.lect_start_date, '%Y.%m.%d'), ' ~ ', DATE_FORMAT(l.lect_end_date, '%Y.%m.%d')) AS lect_period

FROM lecture l
JOIN teacher t ON l.t_idx = t.t_idx
JOIN user u ON t.user_idx = u.user_idx
JOIN class c ON l.class_idx = c.class_idx
WHERE l.lect_idx = #{lect_idx}
</select>
<!-- Submit idx 추출 -->
<select id="getSubmitIdx" parameterType="map" resultType="String">
  SELECT submit_idx
  FROM submit
  WHERE assign_idx = #{assign_idx}
    AND enroll_idx = #{enroll_idx}
  ORDER BY submit_write_date DESC
  LIMIT 1
</select>
<!-- 기존 파일 삭제 -->
<delete id="deleteSubmitFiles" parameterType="String">
  DELETE FROM submit_file WHERE submit_idx = #{submit_idx}
</delete>
<!-- 모든 파일 가져오기 -->
<select id="getAllSubmitFiles" resultType="map" parameterType="map">
  SELECT 
    f.submit_f_idx,
    f.submit_idx,
    f.submit_f_name,
    f.submit_f_old_name,
    f.submit_f_size,
    f.submit_f_type,
    f.submit_f_order,
    s.submit_title,
    s.submit_write_date,
    a.assign_title,
    u.name AS student_name

  FROM submit s
  JOIN submit_file f ON s.submit_idx = f.submit_idx
  JOIN enroll e ON s.enroll_idx = e.enroll_idx
  JOIN student st ON e.s_idx = st.s_idx
  JOIN user u ON st.user_idx = u.user_idx
  JOIN assign a ON s.assign_idx = a.assign_idx

  WHERE s.enroll_idx = #{enroll_idx}
    AND a.assign_idx = #{assign_idx}

  ORDER BY f.submit_f_order ASC
</select>
</mapper>